name: Deploy Infrastructure + App to GCP

on:
  push:
    branches:
      - main

jobs:
  terraform-and-deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform  # ExÃ©cuter dans dossier

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create terraform directory (in case it doesn't exist)
        run: mkdir -p .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Setup Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Create terraform.tfvars file
        run: |
          echo 'project_id         = "eastern-memory-460407-a3"' > terraform.tfvars
          echo 'region             = "europe-west1"' >> terraform.tfvars
          echo 'zone               = "europe-west1-b"' >> terraform.tfvars
          echo 'admin_username     = "ubuntu"' >> terraform.tfvars
          echo 'public_ssh_key     = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDORx8rY3YsXcMyVlMVgyX7SJM/czRvPgYFOub+a+yj0wkBNSz5FeYRX62zw82iPKVqbIAC6FeL5PDteOQzyLbw37zWFz+2ZiSEYolg4RYG8A1LH995nlSn+0GAbzSeTEFCMLipFCmcOP5sRVXiNQjcwLMPaaJ9nKOEJzJxFQaMav3Qfkpi02ilnRLcOjdOjxxyxRsPBi30zTemZ2pn20358/OwnA1/xa+FBO0+0ryKXmeID4P8SL/JdsJauDqQ3htUrTjF0yLWyzaJAyJiDQyy1tmL5vbdOLMaApFhEsN2BJrxIpFdAkvbXDxgvpW3doq/mcUsoG7pXvZk1YA4hk1atUwlk56e42394v1CY2h0omiBl5krs++3s1DQQdFZjSCoeaabao3tapowYvbST5H9wqBZUT4xVqJcQll/DSQBfRowAwr9OCFRY2uO/migDoRRJbh0NNu4/uoGchB6wqId2ANfLxx1ARnEIOqcwf3ZUXcCv6DbVtUSJ4NMWSS/1PrTL8zzG4m6g2Du7M4RLA8uxY9eSwigRVY8pXE1migOubX88OSC3sCQznJx3Nf2fZAowVztmL43p+Ub6LR/vgWP/xisPAE/cFada3WowgGZH33kwhGFx3y+TTi2YwJkrGLNiZ8y0T3lKiWU5YnZpKGBkCKd6sEMyBrV/09ZqxVDiw== user@DESKTOP-6IJPB9A"' >> terraform.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -var-file=terraform.tfvars -auto-approve

      - name: Output public IP
        run: terraform output -raw public_ip

      - name: Get VM IP
        id: get_ip
        run: echo "VM_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV

      - name: Generate SSH key
        run: |
          ssh-keygen -t rsa -b 4096 -f temp-ssh-key -N ""
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          cat temp-ssh-key >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "SSH_PUBLIC_KEY=$(cat temp-ssh-key.pub)" >> $GITHUB_ENV

      - name: Inject SSH public key in VM with Terraform
        working-directory: terraform
        run: |
          echo "public_ssh_key = \"${SSH_PUBLIC_KEY}\"" > temp-auto.tfvars

      - name: Re-apply Terraform with public key
        run: terraform apply -var-file=terraform.tfvars -var-file=temp-auto.tfvars -auto-approve
        working-directory: terraform

      - name: Save private key to file
        run: |
          echo "$SSH_PRIVATE_KEY" > temp-ssh-key.pem
          chmod 600 temp-ssh-key.pem

      - name: Upload files to VM
        working-directory: ${{ github.workspace }}
        run: |
          ls
          echo "$SSH_PRIVATE_KEY" > temp-ssh-key.pem
          chmod 600 temp-ssh-key.pem
          echo "Uploading to IP: $VM_IP"
          scp -o StrictHostKeyChecking=no -i temp-ssh-key.pem -r tests SimulateData.py requirements.txt Dockerfile docker-compose.yml ubuntu@$VM_IP:/home/ubuntu/Back

      - name: Check and install Docker on VM
        run: |
          echo "$SSH_PRIVATE_KEY" > temp-ssh-key.pem
          chmod 600 temp-ssh-key.pem
          echo "Checking/Installing Docker on $VM_IP..."
          ssh -o StrictHostKeyChecking=no -i temp-ssh-key.pem ubuntu@$VM_IP << EOF
            if ! command -v docker &> /dev/null
            then
              echo "Docker not found. Installing..."
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                \$(. /etc/os-release && echo \"\$VERSION_CODENAME\") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo usermod -aG docker ubuntu
              echo "Docker installed successfully."
            else
              echo "Docker is already installed."
            fi
          EOF

      - name: Build and run Docker Compose on VM
        run: |
          echo "$SSH_PRIVATE_KEY" > temp-ssh-key.pem
          chmod 600 temp-ssh-key.pem
          ssh -o StrictHostKeyChecking=no -i temp-ssh-key.pem ubuntu@$VM_IP << EOF
            cd /home/ubuntu
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose not found, attempting fallback install..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            echo "Building and starting containers..."
            docker compose build
            docker compose up -d
          EOF
